// <auto-generated />
namespace WideWorldImporters.Tests.Database_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::NUnit.Framework.Interfaces;
    using global::System.Collections.Generic;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::System.Threading.Tasks;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.Common.Sql.RowStoreGrid;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.LegiTest.DataComparison.Validation;
    using global::PragmaticWorks.LegiTest.Runtime.Helper;
    using global::PragmaticWorks.LegiTest.DataComparison.Aggregation;
    using global::System.Globalization;
    using global::PragmaticWorks.Common.Sql.ValueComparison;
    using global::PragmaticWorks.LegiTest.DataComparison.Comparison;
    using global::System.IO;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2019.2.2.0")]
    [UniqueId("4c0460d4-c9d1-41b4-b38f-bddf1d5649f9")]
    public partial class Database
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static Database()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("5dd051a5-2258-40cf-802f-020b0d134d71"), typeof(Database));
        }
        
        [OneTimeSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(Database), Resources.TestManifest_Database_4c0460d4c9d141b4b38fbddf1d5649f9, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Skipped));
        }
        
        [OneTimeTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Sales Validate Discounts Less Than 10 Percent
        [Category("Database")]
        [Test]
        [UniqueId("acbe647e-7f93-4add-b9ce-83eb9008912f")]
        public void SalesValidateDiscountsLessThan10Percent()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Sales Validate Discounts Less Than 10 Percent", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Execute Query
                testStateTracker.RunElement(new Guid("649fdca4-af76-4af7-8b76-520028122b76"), "Execute Query", TestStepType.Test, SalesValidateDiscountsLessThan10Percent_ExecuteQuery);
                // Call implementation for step Validate Grid
                testStateTracker.RunAssert(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid", SalesValidateDiscountsLessThan10Percent_ValidateGrid);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Sales Validate Discounts Less Than 10 Percent", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test HR Database vs Employee Benefit File
        [Category("Database")]
        [Test]
        [UniqueId("a7620b1f-006c-4fb3-a41e-ab237d7e3c23")]
        public void HRDatabasevsEmployeeBenefitFile()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("HR Database vs Employee Benefit File", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, HRDatabasevsEmployeeBenefitFile_ExecutionTrack0, HRDatabasevsEmployeeBenefitFile_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids", HRDatabasevsEmployeeBenefitFile_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("HR Database vs Employee Benefit File", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Operations Stocktakes More than 5 Percent Off From OnHandQuantities
        [Category("Database")]
        [Test]
        [UniqueId("82a0c92f-961a-4cbf-9d4a-1252426241a2")]
        public void OperationsStocktakesMorethan5PercentOffFromOnHandQuantities()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Execute Query
                testStateTracker.RunElement(new Guid("a7d97353-b277-45cd-ba40-9285a5f7fbee"), "Execute Query", TestStepType.Test, OperationsStocktakesMorethan5PercentOffFromOnHandQuantities_Exec);
                // Call implementation for step Validate Grid
                testStateTracker.RunAssert(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid", OperationsStocktakesMorethan5PercentOffFromOnHandQuantities_Vali);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Warehouse Cold Room Temperatures Outside of 1 Std
        [Category("Database")]
        [Test]
        [UniqueId("fb70fdba-4ddf-4f24-b87d-c03cdd179b5d")]
        public void WarehouseColdRoomTemperaturesOutsideof1Std()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Warehouse Cold Room Temperatures Outside of 1 Std", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Get groups that exceed the maximum standard deviation
                testStateTracker.RunElement(new Guid("10498998-0e20-46de-9dab-1dfd15826bea"), "Get groups that exceed the maximum standard deviation", TestStepType.Test, WarehouseColdRoomTemperaturesOutsideof1Std_Getgroupsthatexceedth);
                // Call implementation for step Validate that the set is empty
                testStateTracker.RunAssert(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty", WarehouseColdRoomTemperaturesOutsideof1Std_Validatethatthesetise);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Warehouse Cold Room Temperatures Outside of 1 Std", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Financials Outstanding Balances between 0 and 500K
        [Category("Database")]
        [Test]
        [UniqueId("1babb952-f1a7-4095-93aa-828c93d2b963")]
        public void FinancialsOutstandingBalancesbetween0and500K()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Financials Outstanding Balances between 0 and 500K", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Get rows that are out of range
                testStateTracker.RunElement(new Guid("dc50fde2-5674-4f89-b71e-206901875adb"), "Get rows that are out of range", TestStepType.Test, FinancialsOutstandingBalancesbetween0and500K_Getrowsthatareoutof);
                // Call implementation for step Validate that the set is empty
                testStateTracker.RunAssert(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty", FinancialsOutstandingBalancesbetween0and500K_Validatethattheseti);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Financials Outstanding Balances between 0 and 500K", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Data Quality Order Amount OLTP vs DW
        [Category("Database")]
        [Test]
        [UniqueId("d2ee1415-fc7e-46cf-8b8c-d5648f801591")]
        public void DataQualityOrderAmountOLTPvsDW()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Data Quality Order Amount OLTP vs DW", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, DataQualityOrderAmountOLTPvsDW_ExecutionTrack0, DataQualityOrderAmountOLTPvsDW_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids", DataQualityOrderAmountOLTPvsDW_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Data Quality Order Amount OLTP vs DW", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Financials Check Unique Invoice ID
        [Category("Database")]
        [Test]
        [UniqueId("c78007f2-c1bb-4878-b2dc-1ae60577d413")]
        public void FinancialsCheckUniqueInvoiceID()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Financials Check Unique Invoice ID", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Get rows that aren't unique
                testStateTracker.RunElement(new Guid("2e790d70-4b20-4ef2-a50c-fd86d25e686d"), "Get rows that aren\'t unique", TestStepType.Test, FinancialsCheckUniqueInvoiceID_Getrowsthatarentunique);
                // Call implementation for step Validate that the set is empty
                testStateTracker.RunAssert(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty", FinancialsCheckUniqueInvoiceID_Validatethatthesetisempty);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Financials Check Unique Invoice ID", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Row Count Comparison
        [Category("Database")]
        [Test]
        [UniqueId("e2797ada-6296-4e99-8b52-1318a010ad77")]
        public void RowCountComparison()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Row Count Comparison", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, RowCountComparison_ExecutionTrack0, RowCountComparison_ExecutionTrack1);
                // Call implementation for step Compare Row Counts
                testStateTracker.RunAssert(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts", RowCountComparison_CompareRowCounts);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Row Count Comparison", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Comparison Test
        [Category("Database")]
        [Test]
        [UniqueId("6caaacfd-401d-4dbc-8bab-e66380c2b84a")]
        public void ComparisonTest()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Comparison Test", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, ComparisonTest_ExecutionTrack0, ComparisonTest_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids", ComparisonTest_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Comparison Test", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test FIle Content
        [Category("Database")]
        [Test]
        [UniqueId("83158c0a-3fde-4dc4-b061-e982a8485c13")]
        public void FIleContent()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("FIle Content", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Load Flat File Data
                testStateTracker.RunElement(new Guid("4defb034-037b-42bd-b6a9-71ae4fd13235"), "Load Flat File Data", TestStepType.Test, FIleContent_LoadFlatFileData);
                // Call implementation for step File Content Comparison
                testStateTracker.RunAssert(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "File Content Comparison", FIleContent_FileContentComparison);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("FIle Content", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for step Execute Query for Sales Validate Discounts Less Than 10 Percent
        private void SalesValidateDiscountsLessThan10Percent_ExecuteQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sales Validate Discounts Less Than 10 Percent", "Execute Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("32b90a4b-2fed-4a29-ad31-e69a47f661cf"), "Value", Resources.TestResource_Query_32b90a4b2fed4a29ad31e69a47f661cf);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("649fdca4-af76-4af7-8b76-520028122b76"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("649fdca4-af76-4af7-8b76-520028122b76"), "Execute Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("649fdca4-af76-4af7-8b76-520028122b76"), "Execute Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_Query"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Sales Validate Discounts Less Than 10 Percent", "Execute Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sales Validate Discounts Less Than 10 Percent", "Execute Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Validate Grid for Sales Validate Discounts Less Than 10 Percent
        private void SalesValidateDiscountsLessThan10Percent_ValidateGrid()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sales Validate Discounts Less Than 10 Percent", "Validate Grid", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Validation Manifest
                    ValidationManifest validationManifest = ValidationManifest.Deserialize(Resources.TestResource_ValidationManifest_88f1cc585d884547a3f3014e7efc3129);
                    ValidationManifestParameterizer.ApplyParameters(validationManifest, parameterProvider);

                    // Get grid resource
                    IGrid grid = ((IGrid)(_testResources["SqlTest_Query"]));

                    // Perform grid validation
                    int failureRowLimit = parameterProvider.GetTypedParameter<int>(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "FailureRowLimit", 50);
                    GridValidator gridValidator = new GridValidator(validationManifest, grid, failureRowLimit);
                    ValidationResult validationResult = gridValidator.Validate();

                    // Get results
                    IGrid failureRows = validationResult.ValidationFailureRows;
                    IList<AggregationResult> aggregationRows = validationResult.AggregationResults;

                    // Assert validation results
                    testStateTracker.PushAssertResult(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid : Validation Failure Rows", null, validationResult, true);
                    try
                    {
                        Assert.AreEqual(0, validationResult.ActualValidationFailureCount, string.Format(CultureInfo.CurrentCulture, "Expected {0} validation failures, but was {1}. {2}", 0, validationResult.ActualValidationFailureCount, validationResult.FormatErrorRows(parameterProvider.GetTypedParameter<int>(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "TestOutputMessageRowLimit", 10))));
                        testStateTracker.PushAssertResult(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, false);
                        throw;
                    }

                    // Assert aggregation results
                    for (int i = 0; (i < aggregationRows.Count); i = (i + 1))
                    {
                        AggregationResult row = aggregationRows[i];
                        try
                        {
                            Assert.AreNotEqual(ValueComparisonResult.NotEqual, row.Result, string.Format(CultureInfo.CurrentCulture, "Expected {0} aggregation on column with index {1} to be {2} or {3}, but was {4}.", row.AggregationType.ToString(), row.ColumnIndex, ValueComparisonResult.Equal.ToString(), ValueComparisonResult.WithinTolerance.ToString(), ValueComparisonResult.NotEqual.ToString()));
                            testStateTracker.PushAssertResult(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, true);
                        }
                        catch
                        {
                            testStateTracker.PushAssertResult(new Guid("53e45257-25ec-42d9-876c-29521eee34f8"), "Validate Grid : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, false);
                            throw;
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Sales Validate Discounts Less Than 10 Percent", "Validate Grid", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Sales Validate Discounts Less Than 10 Percent", "Validate Grid", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sales Validate Discounts Less Than 10 Percent", "Validate Grid", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test HR Database vs Employee Benefit File
        private void HRDatabasevsEmployeeBenefitFile_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("4e17d70e-ca16-4a7d-8d3d-f29c44af6585"), "Execute Expected Query", TestStepType.Test, HRDatabasevsEmployeeBenefitFile_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for HR Database vs Employee Benefit File
        private void HRDatabasevsEmployeeBenefitFile_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("HR Database vs Employee Benefit File", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("fe97b359-01e5-4552-901f-962b112aabe0"), "Value", Resources.TestResource_ExpectedQuery_fe97b35901e54552901f962b112aabe0);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("4e17d70e-ca16-4a7d-8d3d-f29c44af6585"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("4e17d70e-ca16-4a7d-8d3d-f29c44af6585"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("4e17d70e-ca16-4a7d-8d3d-f29c44af6585"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "HR Database vs Employee Benefit File", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("HR Database vs Employee Benefit File", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test HR Database vs Employee Benefit File
        private void HRDatabasevsEmployeeBenefitFile_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("52e4eecc-b5eb-4e53-9501-aa32678f64de"), "Execute Actual Query", TestStepType.Test, HRDatabasevsEmployeeBenefitFile_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for HR Database vs Employee Benefit File
        private void HRDatabasevsEmployeeBenefitFile_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("HR Database vs Employee Benefit File", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Delimited File Reference
                    DelimitedFileSourceInformation fileReference = DelimitedFileSourceInformationSerializer.ReadFromByteArray(Resources.TestResource_DelimitedFileReference_7b9bdd937aa84a52b3a435253bfe1ecd);
                    fileReference.FileName = parameterProvider.GetTypedParameter<string>(new Guid("7b9bdd93-7aa8-4a52-b3a4-35253bfe1ecd"), "FileName", fileReference.FileName);
                    IGrid grid = DelimitedFileSourceLoader.LoadGrid(fileReference, false, 0, parameterProvider.GetTypedParameter<string>(new Guid("52e4eecc-b5eb-4e53-9501-aa32678f64de"), "FilterExpression", ""), parameterProvider.GetTypedParameter<string>(new Guid("52e4eecc-b5eb-4e53-9501-aa32678f64de"), "ExcludedColumns", ""));
                    _testResources["SqlTest_RightQuery"] = grid;
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "HR Database vs Employee Benefit File", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("HR Database vs Employee Benefit File", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for HR Database vs Employee Benefit File
        private void HRDatabasevsEmployeeBenefitFile_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("HR Database vs Employee Benefit File", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_6d0324245572438c9d276c2827655cd4);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("77f0be19-e188-4100-bb75-c508d76deb57"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "HR Database vs Employee Benefit File", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "HR Database vs Employee Benefit File", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("HR Database vs Employee Benefit File", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Execute Query for Operations Stocktakes More than 5 Percent Off From OnHandQuantities
        private void OperationsStocktakesMorethan5PercentOffFromOnHandQuantities_Exec()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Execute Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("2d600ff1-ee0a-46c9-9a29-3e130e141fee"), "Value", Resources.TestResource_Query_2d600ff1ee0a46c99a293e130e141fee);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("a7d97353-b277-45cd-ba40-9285a5f7fbee"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("a7d97353-b277-45cd-ba40-9285a5f7fbee"), "Execute Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("a7d97353-b277-45cd-ba40-9285a5f7fbee"), "Execute Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_Query"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Execute Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Execute Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Validate Grid for Operations Stocktakes More than 5 Percent Off From OnHandQuantities
        private void OperationsStocktakesMorethan5PercentOffFromOnHandQuantities_Vali()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Validate Grid", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Validation Manifest
                    ValidationManifest validationManifest = ValidationManifest.Deserialize(Resources.TestResource_ValidationManifest_f0ff97a3657a40c69043fa8b85dbf7c3);
                    ValidationManifestParameterizer.ApplyParameters(validationManifest, parameterProvider);

                    // Get grid resource
                    IGrid grid = ((IGrid)(_testResources["SqlTest_Query"]));

                    // Perform grid validation
                    int failureRowLimit = parameterProvider.GetTypedParameter<int>(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "FailureRowLimit", 50);
                    GridValidator gridValidator = new GridValidator(validationManifest, grid, failureRowLimit);
                    ValidationResult validationResult = gridValidator.Validate();

                    // Get results
                    IGrid failureRows = validationResult.ValidationFailureRows;
                    IList<AggregationResult> aggregationRows = validationResult.AggregationResults;

                    // Assert validation results
                    testStateTracker.PushAssertResult(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid : Validation Failure Rows", null, validationResult, true);
                    try
                    {
                        Assert.AreEqual(0, validationResult.ActualValidationFailureCount, string.Format(CultureInfo.CurrentCulture, "Expected {0} validation failures, but was {1}. {2}", 0, validationResult.ActualValidationFailureCount, validationResult.FormatErrorRows(parameterProvider.GetTypedParameter<int>(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "TestOutputMessageRowLimit", 10))));
                        testStateTracker.PushAssertResult(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, false);
                        throw;
                    }

                    // Assert aggregation results
                    for (int i = 0; (i < aggregationRows.Count); i = (i + 1))
                    {
                        AggregationResult row = aggregationRows[i];
                        try
                        {
                            Assert.AreNotEqual(ValueComparisonResult.NotEqual, row.Result, string.Format(CultureInfo.CurrentCulture, "Expected {0} aggregation on column with index {1} to be {2} or {3}, but was {4}.", row.AggregationType.ToString(), row.ColumnIndex, ValueComparisonResult.Equal.ToString(), ValueComparisonResult.WithinTolerance.ToString(), ValueComparisonResult.NotEqual.ToString()));
                            testStateTracker.PushAssertResult(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, true);
                        }
                        catch
                        {
                            testStateTracker.PushAssertResult(new Guid("c79e5de7-7a0c-4862-b611-be2177ad3f92"), "Validate Grid : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, false);
                            throw;
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Validate Grid", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Validate Grid", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Operations Stocktakes More than 5 Percent Off From OnHandQuantities", "Validate Grid", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Get groups that exceed the maximum standard deviation for Warehouse Cold Room Temperatures Outside of 1 Std
        private void WarehouseColdRoomTemperaturesOutsideof1Std_Getgroupsthatexceedth()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Warehouse Cold Room Temperatures Outside of 1 Std", "Get groups that exceed the maximum standard deviation", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset StandardDeviationQuery
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("c5e05ae3-eeb8-448c-b05f-8e5e9ff50e98"), "Value", Resources.TestResource_StandardDeviationQuery_c5e05ae3eeb8448cb05f8e5e9ff50e98);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("10498998-0e20-46de-9dab-1dfd15826bea"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("10498998-0e20-46de-9dab-1dfd15826bea"), "Get groups that exceed the maximum standard deviation : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("10498998-0e20-46de-9dab-1dfd15826bea"), "Get groups that exceed the maximum standard deviation : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["stDevDataset"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Warehouse Cold Room Temperatures Outside of 1 Std", "Get groups that exceed the maximum standard deviation", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Warehouse Cold Room Temperatures Outside of 1 Std", "Get groups that exceed the maximum standard deviation", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Validate that the set is empty for Warehouse Cold Room Temperatures Outside of 1 Std
        private void WarehouseColdRoomTemperaturesOutsideof1Std_Validatethatthesetise()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Warehouse Cold Room Temperatures Outside of 1 Std", "Validate that the set is empty", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Empty set validation manifest
                    ValidationManifest validationManifest = ValidationManifest.Deserialize(Resources.TestResource_Emptysetvalidationmanifest_f5321a5eb9b8422782bf2b194ebe676f);
                    ValidationManifestParameterizer.ApplyParameters(validationManifest, parameterProvider);

                    // Get grid resource
                    IGrid grid = ((IGrid)(_testResources["stDevDataset"]));

                    // Perform grid validation
                    int failureRowLimit = parameterProvider.GetTypedParameter<int>(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "FailureRowLimit", 50);
                    GridValidator gridValidator = new GridValidator(validationManifest, grid, failureRowLimit);
                    ValidationResult validationResult = gridValidator.Validate();

                    // Get results
                    IGrid failureRows = validationResult.ValidationFailureRows;
                    IList<AggregationResult> aggregationRows = validationResult.AggregationResults;

                    // Assert validation results
                    testStateTracker.PushAssertResult(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty : Validation Failure Rows", null, validationResult, true);
                    try
                    {
                        Assert.AreEqual(0, validationResult.ActualValidationFailureCount, string.Format(CultureInfo.CurrentCulture, "Expected {0} validation failures, but was {1}. {2}", 0, validationResult.ActualValidationFailureCount, validationResult.FormatErrorRows(parameterProvider.GetTypedParameter<int>(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "TestOutputMessageRowLimit", 10))));
                        testStateTracker.PushAssertResult(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, false);
                        throw;
                    }

                    // Assert aggregation results
                    for (int i = 0; (i < aggregationRows.Count); i = (i + 1))
                    {
                        AggregationResult row = aggregationRows[i];
                        try
                        {
                            Assert.AreNotEqual(ValueComparisonResult.NotEqual, row.Result, string.Format(CultureInfo.CurrentCulture, "Expected {0} aggregation on column with index {1} to be {2} or {3}, but was {4}.", row.AggregationType.ToString(), row.ColumnIndex, ValueComparisonResult.Equal.ToString(), ValueComparisonResult.WithinTolerance.ToString(), ValueComparisonResult.NotEqual.ToString()));
                            testStateTracker.PushAssertResult(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, true);
                        }
                        catch
                        {
                            testStateTracker.PushAssertResult(new Guid("67ecb1fd-6655-49cc-bb1f-8ab2e8ecaa45"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, false);
                            throw;
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Warehouse Cold Room Temperatures Outside of 1 Std", "Validate that the set is empty", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Warehouse Cold Room Temperatures Outside of 1 Std", "Validate that the set is empty", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Warehouse Cold Room Temperatures Outside of 1 Std", "Validate that the set is empty", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Get rows that are out of range for Financials Outstanding Balances between 0 and 500K
        private void FinancialsOutstandingBalancesbetween0and500K_Getrowsthatareoutof()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Financials Outstanding Balances between 0 and 500K", "Get rows that are out of range", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImportersDW
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImportersDW_9e990a18f179475e9a24eca7ef66ba76);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset SourceQuery
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("a9bc0891-6843-43ae-bcbc-ad8afe48885d"), "Value", Resources.TestResource_SourceQuery_a9bc0891684343aebcbcad8afe48885d);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("dc50fde2-5674-4f89-b71e-206901875adb"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("dc50fde2-5674-4f89-b71e-206901875adb"), "Get rows that are out of range : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("dc50fde2-5674-4f89-b71e-206901875adb"), "Get rows that are out of range : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["outOfRangeDataset"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Financials Outstanding Balances between 0 and 500K", "Get rows that are out of range", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Financials Outstanding Balances between 0 and 500K", "Get rows that are out of range", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Validate that the set is empty for Financials Outstanding Balances between 0 and 500K
        private void FinancialsOutstandingBalancesbetween0and500K_Validatethattheseti()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Financials Outstanding Balances between 0 and 500K", "Validate that the set is empty", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Empty set validation manifest
                    ValidationManifest validationManifest = ValidationManifest.Deserialize(Resources.TestResource_Emptysetvalidationmanifest_3b48b94dcd56482cbbe6ab0158afc977);
                    ValidationManifestParameterizer.ApplyParameters(validationManifest, parameterProvider);

                    // Get grid resource
                    IGrid grid = ((IGrid)(_testResources["outOfRangeDataset"]));

                    // Perform grid validation
                    int failureRowLimit = parameterProvider.GetTypedParameter<int>(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "FailureRowLimit", 50);
                    GridValidator gridValidator = new GridValidator(validationManifest, grid, failureRowLimit);
                    ValidationResult validationResult = gridValidator.Validate();

                    // Get results
                    IGrid failureRows = validationResult.ValidationFailureRows;
                    IList<AggregationResult> aggregationRows = validationResult.AggregationResults;

                    // Assert validation results
                    testStateTracker.PushAssertResult(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty : Validation Failure Rows", null, validationResult, true);
                    try
                    {
                        Assert.AreEqual(0, validationResult.ActualValidationFailureCount, string.Format(CultureInfo.CurrentCulture, "Expected {0} validation failures, but was {1}. {2}", 0, validationResult.ActualValidationFailureCount, validationResult.FormatErrorRows(parameterProvider.GetTypedParameter<int>(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "TestOutputMessageRowLimit", 10))));
                        testStateTracker.PushAssertResult(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, false);
                        throw;
                    }

                    // Assert aggregation results
                    for (int i = 0; (i < aggregationRows.Count); i = (i + 1))
                    {
                        AggregationResult row = aggregationRows[i];
                        try
                        {
                            Assert.AreNotEqual(ValueComparisonResult.NotEqual, row.Result, string.Format(CultureInfo.CurrentCulture, "Expected {0} aggregation on column with index {1} to be {2} or {3}, but was {4}.", row.AggregationType.ToString(), row.ColumnIndex, ValueComparisonResult.Equal.ToString(), ValueComparisonResult.WithinTolerance.ToString(), ValueComparisonResult.NotEqual.ToString()));
                            testStateTracker.PushAssertResult(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, true);
                        }
                        catch
                        {
                            testStateTracker.PushAssertResult(new Guid("66069c17-1cfd-49cc-9d7b-0d3f6c0bb54e"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, false);
                            throw;
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Financials Outstanding Balances between 0 and 500K", "Validate that the set is empty", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Financials Outstanding Balances between 0 and 500K", "Validate that the set is empty", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Financials Outstanding Balances between 0 and 500K", "Validate that the set is empty", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Data Quality Order Amount OLTP vs DW
        private void DataQualityOrderAmountOLTPvsDW_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("9dfa89c1-9af5-4a4b-bfc4-1b0b8c3f2428"), "Execute Expected Query", TestStepType.Test, DataQualityOrderAmountOLTPvsDW_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Data Quality Order Amount OLTP vs DW
        private void DataQualityOrderAmountOLTPvsDW_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Data Quality Order Amount OLTP vs DW", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("1fb338e8-d454-4b1e-a7b1-d14b11d89773"), "Value", Resources.TestResource_ExpectedQuery_1fb338e8d4544b1ea7b1d14b11d89773);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("9dfa89c1-9af5-4a4b-bfc4-1b0b8c3f2428"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("9dfa89c1-9af5-4a4b-bfc4-1b0b8c3f2428"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("9dfa89c1-9af5-4a4b-bfc4-1b0b8c3f2428"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Data Quality Order Amount OLTP vs DW", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Data Quality Order Amount OLTP vs DW", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Data Quality Order Amount OLTP vs DW
        private void DataQualityOrderAmountOLTPvsDW_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("a3a03d62-58e9-4262-b9c2-0665a0157e37"), "Execute Actual Query", TestStepType.Test, DataQualityOrderAmountOLTPvsDW_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Data Quality Order Amount OLTP vs DW
        private void DataQualityOrderAmountOLTPvsDW_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Data Quality Order Amount OLTP vs DW", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImportersDW
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImportersDW_9e990a18f179475e9a24eca7ef66ba76);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("d5623483-5d05-4017-ac60-1fb9a407b5e5"), "Value", Resources.TestResource_ActualQuery_d56234835d054017ac601fb9a407b5e5);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("a3a03d62-58e9-4262-b9c2-0665a0157e37"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("a3a03d62-58e9-4262-b9c2-0665a0157e37"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("a3a03d62-58e9-4262-b9c2-0665a0157e37"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Data Quality Order Amount OLTP vs DW", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Data Quality Order Amount OLTP vs DW", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Data Quality Order Amount OLTP vs DW
        private void DataQualityOrderAmountOLTPvsDW_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Data Quality Order Amount OLTP vs DW", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_668e24ea32a9454ab6b2c01b78bb4c4d);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d26edbe3-1675-4416-9c8e-7fa3558210e4"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Data Quality Order Amount OLTP vs DW", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Data Quality Order Amount OLTP vs DW", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Data Quality Order Amount OLTP vs DW", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Get rows that aren't unique for Financials Check Unique Invoice ID
        private void FinancialsCheckUniqueInvoiceID_Getrowsthatarentunique()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Financials Check Unique Invoice ID", "Get rows that aren\'t unique", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset SourceQuery
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("acbe73c0-8028-489b-a4b1-f63d28e9b706"), "Value", Resources.TestResource_SourceQuery_acbe73c08028489ba4b1f63d28e9b706);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("2e790d70-4b20-4ef2-a50c-fd86d25e686d"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("2e790d70-4b20-4ef2-a50c-fd86d25e686d"), "Get rows that aren\'t unique : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("2e790d70-4b20-4ef2-a50c-fd86d25e686d"), "Get rows that aren\'t unique : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["duplicateDataset"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Financials Check Unique Invoice ID", "Get rows that aren\'t unique", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Financials Check Unique Invoice ID", "Get rows that aren\'t unique", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Validate that the set is empty for Financials Check Unique Invoice ID
        private void FinancialsCheckUniqueInvoiceID_Validatethatthesetisempty()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Financials Check Unique Invoice ID", "Validate that the set is empty", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Empty set validation manifest
                    ValidationManifest validationManifest = ValidationManifest.Deserialize(Resources.TestResource_Emptysetvalidationmanifest_cf1cbc41adca4e3395058bb06c33a311);
                    ValidationManifestParameterizer.ApplyParameters(validationManifest, parameterProvider);

                    // Get grid resource
                    IGrid grid = ((IGrid)(_testResources["duplicateDataset"]));

                    // Perform grid validation
                    int failureRowLimit = parameterProvider.GetTypedParameter<int>(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "FailureRowLimit", 50);
                    GridValidator gridValidator = new GridValidator(validationManifest, grid, failureRowLimit);
                    ValidationResult validationResult = gridValidator.Validate();

                    // Get results
                    IGrid failureRows = validationResult.ValidationFailureRows;
                    IList<AggregationResult> aggregationRows = validationResult.AggregationResults;

                    // Assert validation results
                    testStateTracker.PushAssertResult(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty : Validation Failure Rows", null, validationResult, true);
                    try
                    {
                        Assert.AreEqual(0, validationResult.ActualValidationFailureCount, string.Format(CultureInfo.CurrentCulture, "Expected {0} validation failures, but was {1}. {2}", 0, validationResult.ActualValidationFailureCount, validationResult.FormatErrorRows(parameterProvider.GetTypedParameter<int>(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "TestOutputMessageRowLimit", 10))));
                        testStateTracker.PushAssertResult(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty : Validation Failure Row Count", 0, validationResult.ActualValidationFailureCount, false);
                        throw;
                    }

                    // Assert aggregation results
                    for (int i = 0; (i < aggregationRows.Count); i = (i + 1))
                    {
                        AggregationResult row = aggregationRows[i];
                        try
                        {
                            Assert.AreNotEqual(ValueComparisonResult.NotEqual, row.Result, string.Format(CultureInfo.CurrentCulture, "Expected {0} aggregation on column with index {1} to be {2} or {3}, but was {4}.", row.AggregationType.ToString(), row.ColumnIndex, ValueComparisonResult.Equal.ToString(), ValueComparisonResult.WithinTolerance.ToString(), ValueComparisonResult.NotEqual.ToString()));
                            testStateTracker.PushAssertResult(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, true);
                        }
                        catch
                        {
                            testStateTracker.PushAssertResult(new Guid("b26dddd5-f967-4183-af67-f84fa24c1584"), "Validate that the set is empty : Aggregation Equal Or Within Tolerance", ValueComparisonResult.NotEqual, row.Result, false);
                            throw;
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Financials Check Unique Invoice ID", "Validate that the set is empty", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Financials Check Unique Invoice ID", "Validate that the set is empty", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Financials Check Unique Invoice ID", "Validate that the set is empty", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Row Count Comparison
        private void RowCountComparison_ExecutionTrack0()
        {
            // Call implementation for step Get Tables from the Source
            testStateTracker.RunElement(new Guid("887c8dfe-4fd6-46a1-922e-f637ecea8b4a"), "Get Tables from the Source", TestStepType.Test, RowCountComparison_GetTablesfromtheSource);
        }
        
        // Implementation for step Get Tables from the Source for Row Count Comparison
        private void RowCountComparison_GetTablesfromtheSource()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Row Count Comparison", "Get Tables from the Source", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset SourceQuery
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("ce90f3f7-81e7-46e2-9089-d6a7932e31ef"), "Value", Resources.TestResource_SourceQuery_ce90f3f781e746e29089d6a7932e31ef);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("887c8dfe-4fd6-46a1-922e-f637ecea8b4a"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("887c8dfe-4fd6-46a1-922e-f637ecea8b4a"), "Get Tables from the Source : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("887c8dfe-4fd6-46a1-922e-f637ecea8b4a"), "Get Tables from the Source : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["sourceDataSet"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Row Count Comparison", "Get Tables from the Source", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Row Count Comparison", "Get Tables from the Source", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Row Count Comparison
        private void RowCountComparison_ExecutionTrack1()
        {
            // Call implementation for step Get Tables from the Target
            testStateTracker.RunElement(new Guid("8b0b0730-4b0d-4e33-8dbe-c02efb9b76d5"), "Get Tables from the Target", TestStepType.Test, RowCountComparison_GetTablesfromtheTarget);
        }
        
        // Implementation for step Get Tables from the Target for Row Count Comparison
        private void RowCountComparison_GetTablesfromtheTarget()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Row Count Comparison", "Get Tables from the Target", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImportersDW
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImportersDW_9e990a18f179475e9a24eca7ef66ba76);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset TargetQuery
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("c7e08fdf-7c03-4e2c-90b7-b4e20f5164dd"), "Value", Resources.TestResource_TargetQuery_c7e08fdf7c034e2c90b7b4e20f5164dd);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("8b0b0730-4b0d-4e33-8dbe-c02efb9b76d5"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("8b0b0730-4b0d-4e33-8dbe-c02efb9b76d5"), "Get Tables from the Target : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("8b0b0730-4b0d-4e33-8dbe-c02efb9b76d5"), "Get Tables from the Target : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["targetDataSet"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Row Count Comparison", "Get Tables from the Target", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Row Count Comparison", "Get Tables from the Target", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Row Counts for Row Count Comparison
        private void RowCountComparison_CompareRowCounts()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Row Count Comparison", "Compare Row Counts", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset RowCount
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_RowCount_76b5b2839cd34ecaa4da15b049a0076a);
                    IGrid expectedGrid = ((IGrid)(_testResources["sourceDataSet"]));
                    IGrid actualGrid = ((IGrid)(_testResources["targetDataSet"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("860ade6f-d1e8-4e5a-8d35-4048fff3e1fd"), "Compare Row Counts : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Row Count Comparison", "Compare Row Counts", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Row Count Comparison", "Compare Row Counts", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Row Count Comparison", "Compare Row Counts", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Comparison Test
        private void ComparisonTest_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("7ed75862-1d52-4b92-bc0e-cb8bc89e5c3a"), "Execute Expected Query", TestStepType.Test, ComparisonTest_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Comparison Test
        private void ComparisonTest_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("274f0b9e-cb7f-464f-b182-5527161680f3"), "Value", Resources.TestResource_ExpectedQuery_274f0b9ecb7f464fb1825527161680f3);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("7ed75862-1d52-4b92-bc0e-cb8bc89e5c3a"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("7ed75862-1d52-4b92-bc0e-cb8bc89e5c3a"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("7ed75862-1d52-4b92-bc0e-cb8bc89e5c3a"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Comparison Test", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Comparison Test
        private void ComparisonTest_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("71f94929-117a-461d-9f25-2b8c3e495f1b"), "Execute Actual Query", TestStepType.Test, ComparisonTest_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Comparison Test
        private void ComparisonTest_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImportersDW
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImportersDW_9e990a18f179475e9a24eca7ef66ba76);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("a216bdca-ec64-4562-b721-ec41cb7b46f1"), "Value", Resources.TestResource_ActualQuery_a216bdcaec644562b721ec41cb7b46f1);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("71f94929-117a-461d-9f25-2b8c3e495f1b"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("71f94929-117a-461d-9f25-2b8c3e495f1b"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("71f94929-117a-461d-9f25-2b8c3e495f1b"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "Comparison Test", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Comparison Test
        private void ComparisonTest_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_5f1cc400840145d7b1aeecca58f58db9);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("f4998ed9-af9d-40b1-8c03-deb203a03065"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "Comparison Test", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "Comparison Test", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Load Flat File Data for FIle Content
        private void FIleContent_LoadFlatFileData()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("FIle Content", "Load Flat File Data", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Delimited File Reference
                    DelimitedFileSourceInformation fileReference = DelimitedFileSourceInformationSerializer.ReadFromByteArray(Resources.TestResource_DelimitedFileReference_92bf42bfceec41f1ae6ba3c41332417a);
                    fileReference.FileName = parameterProvider.GetTypedParameter<string>(new Guid("92bf42bf-ceec-41f1-ae6b-a3c41332417a"), "FileName", fileReference.FileName);
                    IGrid grid = DelimitedFileSourceLoader.LoadGrid(fileReference, false, 0, parameterProvider.GetTypedParameter<string>(new Guid("4defb034-037b-42bd-b6a9-71ae4fd13235"), "FilterExpression", ""), parameterProvider.GetTypedParameter<string>(new Guid("4defb034-037b-42bd-b6a9-71ae4fd13235"), "ExcludedColumns", ""));
                    _testResources["LoadFlatFileData_TargetResourceKey"] = grid;
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Database", "FIle Content", "Load Flat File Data", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("FIle Content", "Load Flat File Data", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step File Content Comparison for FIle Content
        private void FIleContent_FileContentComparison()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("FIle Content", "File Content Comparison", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    string comparisonFileName = parameterProvider.GetTypedParameter<string>(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "ComparisonFile", "{{EmployeeBenefitsFile}}");
                    string expectedContent = File.ReadAllText(comparisonFileName);
                    string actualFileName = parameterProvider.GetTypedParameter<string>(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "Target", "{{EmployeeBenefitsFileTarget}}");
                    string actualContent = File.ReadAllText(actualFileName);
                    try
                    {
                        Assert.IsTrue(FileHelper.CompareContent(expectedContent, actualContent, parameterProvider.GetTypedParameter<bool>(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "IgnoreCase", false), parameterProvider.GetTypedParameter<bool>(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "TrimSpaces", false), parameterProvider.GetTypedParameter<bool>(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "IgnoreLineEndings", false)), string.Format(CultureInfo.CurrentCulture, "Expected file content from file \'{0}\' did not match actual content of file \'{1}\'", comparisonFileName, actualFileName));
                        testStateTracker.PushAssertResult(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "File Content Comparison : File Content", expectedContent, actualContent, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("fcea3f57-d94d-4ac5-8115-07cf078aecf3"), "File Content Comparison : File Content", expectedContent, actualContent, false);
                        throw;
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Database", "FIle Content", "File Content Comparison", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Database", "FIle Content", "File Content Comparison", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("FIle Content", "File Content Comparison", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

