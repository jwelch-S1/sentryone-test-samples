// <auto-generated />
namespace WideWorldImporters.Tests.DataDriven_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::NUnit.Framework.Interfaces;
    using global::System.Collections.Generic;
    using global::PragmaticWorks.LegiTest.Runtime.Helper;
    using global::System.Threading.Tasks;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::PragmaticWorks.Common.Sql.RowStoreGrid;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.LegiTest.DataComparison.Comparison;
    using global::System.Globalization;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2019.2.2.0")]
    [UniqueId("98221a43-9f31-4da4-ac08-a147228a6e8f")]
    public partial class DataDriven
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static DataDriven()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("d5acb37e-d4a5-4223-aac2-4b51eecf7137"), typeof(DataDriven));
        }
        
        [OneTimeSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(DataDriven), Resources.TestManifest_DataDriven_98221a439f314da4ac08a147228a6e8f, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Skipped));
        }
        
        [OneTimeTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Comparison Test
        [Category("DataDriven")]
        [Test]
        [UniqueId("6066c5b3-22a6-45ec-9e8a-9c55e03218d6")]
        [TestCaseSource("ComparisonTestDataSourceEmitterTransform")]
        public void ComparisonTest(string commonTableName, string leftTableName, string rightTableName)
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Comparison Test", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            // Declare the dictionary of test case parameters to record this test case on the server
            Dictionary<string, object> contextObjects = new Dictionary<string, object>();
            contextObjects["CommonTableName"] = commonTableName;
            contextObjects["LeftTableName"] = leftTableName;
            contextObjects["RightTableName"] = rightTableName;

            // Store the test case parameters in the resources
            DataSourceEmitter.CopyToResources(contextObjects, _testResources);

            // Record the test context for the server to differentiate test cases
            testStateTracker.RegisterTestContext(contextObjects);

            // Display the test context in the output to aid debugging
            Console.WriteLine("The test case parameters for this test are:");
            Console.WriteLine(testStateTracker.CurrentTestContext);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, ComparisonTest_ExecutionTrack0, ComparisonTest_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids", ComparisonTest_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Comparison Test", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for data driven data emitter for test Comparison Test
        public static IGrid ComparisonTestDataSourceEmitter()
        {
            // Read asset TablesForRowCountComparison
            DelimitedFileSourceInformation fileReference = DelimitedFileSourceInformationSerializer.ReadFromByteArray(Resources.TestResource_TablesForRowCountComparison_8f85ac9f740b45b89326c911edf0fb90);
            fileReference.FileContent = parameterProvider.GetTypedParameter<string>(new Guid("8f85ac9f-740b-45b8-9326-c911edf0fb90"), "FileContent", fileReference.FileContent);
            return DelimitedFileSourceLoader.LoadGrid(fileReference, false, 0, parameterProvider.GetTypedParameter<string>(new Guid("b65d0bd3-24fb-4572-a694-9330cf32beb6"), "FilterExpression", ""), "");
        }
        
        // Transform method to transform the loaded grid for the NUnit TestCaseSource attribute
        public static IEnumerable<object[]> ComparisonTestDataSourceEmitterTransform()
        {
            IGrid grid = ComparisonTestDataSourceEmitter();
            return DataSourceEmitter.Transform(grid);
        }
        
        // Implementation for execution track 0 of test Comparison Test
        private void ComparisonTest_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("07e67b4a-49b0-4eb1-9223-c3cab2463577"), "Execute Expected Query", TestStepType.Test, ComparisonTest_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Comparison Test
        private void ComparisonTest_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImporters
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImporters_41e6c71419f7453cbf0c35f50ab94707);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("41e6c714-19f7-453c-bf0c-35f50ab94707"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("23079563-0c2d-4ec5-9aa4-88b016a72657"), "Value", Resources.TestResource_ExpectedQuery_230795630c2d4ec59aa488b016a72657);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("07e67b4a-49b0-4eb1-9223-c3cab2463577"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("07e67b4a-49b0-4eb1-9223-c3cab2463577"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("07e67b4a-49b0-4eb1-9223-c3cab2463577"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("DataDriven", "Comparison Test", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Comparison Test
        private void ComparisonTest_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("b3227034-6455-4489-92ec-62cb4d8aa5a2"), "Execute Actual Query", TestStepType.Test, ComparisonTest_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Comparison Test
        private void ComparisonTest_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset WideWorldImportersDW
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_WideWorldImportersDW_9e990a18f179475e9a24eca7ef66ba76);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9e990a18-f179-475e-9a24-eca7ef66ba76"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("270ed289-b1ec-49af-ba87-670be1c472d4"), "Value", Resources.TestResource_ActualQuery_270ed289b1ec49afba87670be1c472d4);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("b3227034-6455-4489-92ec-62cb4d8aa5a2"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("b3227034-6455-4489-92ec-62cb4d8aa5a2"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("b3227034-6455-4489-92ec-62cb4d8aa5a2"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("DataDriven", "Comparison Test", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Comparison Test
        private void ComparisonTest_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Comparison Test", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_ee6bb7410c014fc4a6a7a86387aef848);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("b5ffd87a-74c4-47e0-b089-a491c1b67b3d"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "DataDriven", "Comparison Test", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("DataDriven", "Comparison Test", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Comparison Test", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

