// <auto-generated />
namespace SsasTabularSample.Tests.Measures_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::NUnit.Framework.Interfaces;
    using global::System.Collections.Generic;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.Common.Sql.Filtering;
    using global::PragmaticWorks.LegiTest.Runtime.Helper;
    using global::PragmaticWorks.Common.Sql.ValueComparison;
    using global::System.Globalization;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2019.2.2.0")]
    [UniqueId("ba4d7b12-1e28-46b0-98de-25985bf04323")]
    public partial class Measures
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static Measures()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("163617d2-c58d-47a6-8835-2ae96adde9f2"), typeof(Measures));
        }
        
        [OneTimeSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(Measures), Resources.TestManifest_Measures_ba4d7b121e2846b098de25985bf04323, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Skipped));
        }
        
        [OneTimeTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Check Sales Amount
        [Category("Measures")]
        [Test]
        [UniqueId("759cfc01-706a-4f1e-828f-33d4de788d41")]
        public void CheckSalesAmount()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Check Sales Amount", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Get TotalSalesAmount
                testStateTracker.RunElement(new Guid("bfc1f825-b48c-42c1-871b-13e517b4784f"), "Get TotalSalesAmount", TestStepType.Test, CheckSalesAmount_GetTotalSalesAmount);
                // Call implementation for step Check Total Sales Amount
                testStateTracker.RunAssert(new Guid("03e61e3e-82e5-429b-b6c3-2db2fd6d1648"), "Check Total Sales Amount", CheckSalesAmount_CheckTotalSalesAmount);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Check Sales Amount", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for step Get TotalSalesAmount for Check Sales Amount
        private void CheckSalesAmount_GetTotalSalesAmount()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Check Sales Amount", "Get TotalSalesAmount", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset AdventureWorks Internet Sales
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_AdventureWorksInternetSales_aa032db7d7bb44bd9d63c5c7effa1bef);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("aa032db7-d7bb-44bd-9d63-c5c7effa1bef"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("aa032db7-d7bb-44bd-9d63-c5c7effa1bef"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset TotalSalesAmount
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("6062708b-5778-4252-aa03-2266a220656e"), "Value", Resources.TestResource_TotalSalesAmount_6062708b57784252aa032266a220656e);
                    object scalarResult = GridCollectionLoader.ExecuteScalar(connection.ProviderInvariantName, connection.ConnectionString, query, parameterProvider.GetTypedParameter<int>(new Guid("bfc1f825-b48c-42c1-871b-13e517b4784f"), "Timeout", 30));
                    try
                    {
                        Assert.IsInstanceOf<decimal>(scalarResult, "The scalar result was expected to be of type \'System.Decimal\'");
                        testStateTracker.PushAssertResult(new Guid("bfc1f825-b48c-42c1-871b-13e517b4784f"), "Get TotalSalesAmount : Expected Type", typeof(decimal).FullName, scalarResult, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("bfc1f825-b48c-42c1-871b-13e517b4784f"), "Get TotalSalesAmount : Expected Type", typeof(decimal).FullName, scalarResult, false);
                        throw;
                    }
                    _testResources["ExecuteQueryScalar_TargetResourceKey"] = scalarResult;
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Measures", "Check Sales Amount", "Get TotalSalesAmount", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Check Sales Amount", "Get TotalSalesAmount", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Check Total Sales Amount for Check Sales Amount
        private void CheckSalesAmount_CheckTotalSalesAmount()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Check Sales Amount", "Check Total Sales Amount", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    object actual = FilterFactory.Coerce(_testResources["ExecuteQueryScalar_TargetResourceKey"], typeof(decimal));
                    object expected = FilterFactory.Coerce(parameterProvider.GetTypedParameter<string>(new Guid("03e61e3e-82e5-429b-b6c3-2db2fd6d1648"), "ExpectedValue", "29358677.2207"), typeof(decimal));
                    string actualString;
                    if ((actual == null))
                    {
                        actualString = "null";
                    }
                    else
                    {
                        actualString = actual.ToString();
                    }
                    try
                    {
                        Assert.IsTrue(ValueComparer.Compare(expected, actual, ValueComparisonType.ExactValue, ""), (parameterProvider.ExpandParametersAndEnvironmentVariables(string.Format(CultureInfo.CurrentCulture, "Test resource \'{0}\' was expected to {1} \'{2}\'{3}, actual value was ", "ExecuteQueryScalar_TargetResourceKey", "be exactly equal to", expected, "")) + actualString));
                        testStateTracker.PushAssertResult(new Guid("03e61e3e-82e5-429b-b6c3-2db2fd6d1648"), "Check Total Sales Amount : Value comparison", expected, actual, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("03e61e3e-82e5-429b-b6c3-2db2fd6d1648"), "Check Total Sales Amount : Value comparison", expected, actual, false);
                        throw;
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Measures", "Check Sales Amount", "Check Total Sales Amount", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Measures", "Check Sales Amount", "Check Total Sales Amount", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Check Sales Amount", "Check Total Sales Amount", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

